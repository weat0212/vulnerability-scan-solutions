import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

/**
 * @author created by andy.wang
 * @Date on 2022/5/20
 */
public class HeapInspectionSolution {

    public static void main(String[] args) throws IllegalBlockSizeException, IOException, NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, ClassNotFoundException {

        // 產生AES金鑰
        SecretKey aesKey = generateAesKey();

        // 產生加密演算法
        Cipher cipher = generateCipher(aesKey);

        // 加密
        SealedObject sealedObject = encrypt("password", cipher);

        // 利用AES金鑰解密
        System.out.println("Decrypt: " + sealedObject.getObject(aesKey));
    }

    private static SecretKey generateAesKey() throws NoSuchAlgorithmException {

        KeyGenerator kgen = KeyGenerator.getInstance("AES");
        kgen.init(128); // 可以為 192, 256 bits，較安全相對較慢
        SecretKey aesKey = kgen.generateKey();
        return aesKey;
    }

    private static Cipher generateCipher(SecretKey aesKey) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, aesKey);
        return cipher;
    }

    private static SealedObject encrypt(String plainText, Cipher cipher) throws IllegalBlockSizeException, IOException {

        SealedObject sealedObject = new SealedObject(plainText, cipher);
        return sealedObject;
    }
}
